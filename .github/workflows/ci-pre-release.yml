name: CI - Test and Pre-Release

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

permissions:
  contents: write

jobs:
  test:
    runs-on: ubuntu-22.04
    name: Test Certificate Action
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for changelog
      
      # Test 1: Local file
      - name: Create test certificate
        run: |
          mkdir -p test-certs
          openssl req -x509 -newkey rsa:2048 -keyout test-certs/test-key.pem \
            -out test-certs/test-ca.crt -days 365 -nodes \
            -subj "/C=US/ST=Test/L=Test/O=Test/CN=test.example.com"
      
      - name: Test - Local file installation
        uses: ./
        with:
          certificate-source: 'test-certs/test-ca.crt'
          debug: 'true'
      
      - name: Verify local file installation
        run: |
          if [ -f /usr/local/share/ca-certificates/custom-ca-*.crt ]; then
            echo "✓ Certificate installed from local file"
          else
            echo "✗ Certificate not found in system CA store"
            exit 1
          fi
      
      # Test 2: URL download
      - name: Test - URL download
        uses: ./
        with:
          certificate-source: 'https://curl.se/ca/cacert.pem'
          certificate-name: 'curl-ca-bundle.crt'
          debug: 'true'
      
      - name: Verify URL installation
        run: |
          if [ -f /usr/local/share/ca-certificates/curl-ca-bundle.crt ]; then
            echo "✓ Certificate installed from URL"
          else
            echo "✗ Certificate not found"
            exit 1
          fi
      
      # Test 3: Inline content
      - name: Create inline certificate content
        id: cert-content
        run: |
          openssl req -x509 -newkey rsa:2048 -keyout /tmp/test-key.pem \
            -out /tmp/test-ca.crt -days 365 -nodes \
            -subj "/C=US/ST=Test/L=Test/O=Test/CN=inline.example.com"
          
          CERT_CONTENT=$(cat /tmp/test-ca.crt)
          echo "cert-content<<EOF" >> $GITHUB_OUTPUT
          echo "$CERT_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Test - Inline content
        uses: ./
        with:
          certificate-source: 'inline'
          certificate-body: ${{ steps.cert-content.outputs.cert-content }}
          certificate-name: 'inline-test.crt'
          debug: 'true'
      
      - name: Verify inline installation
        run: |
          if [ -f /usr/local/share/ca-certificates/inline-test.crt ]; then
            echo "✓ Certificate installed from inline content"
          else
            echo "✗ Certificate not found"
            exit 1
          fi
      
      - name: All tests passed
        run: |
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ All tests passed successfully!"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

  pre-release:
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    runs-on: ubuntu-22.04
    name: Create Pre-Release
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for changelog
      
      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Generate version
        id: version
        run: |
          # Get latest official release tag (not pre-release)
          LATEST_TAG=$(git tag --sort=-version:refname | grep -v '-' | head -n 1)
          
          if [ -z "$LATEST_TAG" ]; then
            # No previous release, start at 1.0
            MAJOR_MINOR="1.0"
            echo "📌 No previous release found, starting at ${MAJOR_MINOR}"
          else
            # Extract major.minor from latest tag (e.g., v1.2.45 -> 1.2)
            LATEST_TAG=${LATEST_TAG#v}  # Remove 'v' prefix
            MAJOR_MINOR=$(echo "$LATEST_TAG" | cut -d'.' -f1-2)
            echo "📌 Latest release: v${LATEST_TAG}, using base: ${MAJOR_MINOR}"
          fi
          
          # Get build number from GitHub run number
          BUILD_NUMBER="${{ github.run_number }}"
          
          # Get short SHA
          SHORT_SHA=$(git rev-parse --short HEAD)
          
          # Build pre-release version: major.minor.build-shortsha
          PRE_VERSION="${MAJOR_MINOR}.${BUILD_NUMBER}-${SHORT_SHA}"
          PRE_TAG="v${PRE_VERSION}"
          
          echo "version=${PRE_VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${PRE_TAG}" >> $GITHUB_OUTPUT
          echo "major_minor=${MAJOR_MINOR}" >> $GITHUB_OUTPUT
          echo "build=${BUILD_NUMBER}" >> $GITHUB_OUTPUT
          echo "sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
          
          echo "📦 Pre-release version: ${PRE_TAG}"
      
      - name: Generate changelog
        id: changelog
        run: |
          # Get the last release tag (not pre-release)
          LAST_TAG=$(git tag --sort=-version:refname | grep -v '-' | head -n 1)
          
          if [ -z "$LAST_TAG" ]; then
            # No previous release, get all commits
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            # Get commits since last release
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          # Create changelog
          cat > release-notes.md << 'NOTES_EOF'
          ## Pre-Release Build ${{ steps.version.outputs.build }}
          
          **Version:** `${{ steps.version.outputs.tag }}`  
          **Commit:** `${{ steps.version.outputs.sha }}`  
          **Build:** `#${{ github.run_number }}`
          
          ### Changes Since Last Release
          
          NOTES_EOF
          
          if [ -z "$COMMITS" ]; then
            echo "No new commits" >> release-notes.md
          else
            echo "$COMMITS" >> release-notes.md
          fi
          
          cat >> release-notes.md << 'NOTES_EOF'
          
          ---
          
          > ⚠️ **This is a pre-release build** - Automatically generated for testing purposes.
          > For production use, please use the latest stable release.
          
          ### Usage
          
          ```yaml
          - uses: LiquidLogicLabs/docker-ca-certificate@${{ steps.version.outputs.tag }}
            with:
              certificate-source: 'path/to/cert.crt'
          ```
          NOTES_EOF
          
          cat release-notes.md
      
      - name: Delete existing pre-release tags
        run: |
          # Clean up old pre-release tags to prevent clutter
          # Keep only the last 10 pre-releases
          git fetch --tags
          OLD_TAGS=$(git tag --sort=-version:refname | grep '-' | tail -n +11)
          
          if [ -n "$OLD_TAGS" ]; then
            echo "🧹 Cleaning up old pre-release tags..."
            for tag in $OLD_TAGS; do
              echo "  Deleting $tag"
              git push origin :refs/tags/$tag 2>/dev/null || true
            done
          fi
      
      - name: Create pre-release tag
        run: |
          TAG="${{ steps.version.outputs.tag }}"
          git tag -a $TAG -m "Pre-release build ${{ github.run_number }}"
          git push origin $TAG
      
      - name: Create GitHub pre-release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: "Pre-Release ${{ steps.version.outputs.tag }}"
          body_path: release-notes.md
          draft: false
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Summary
        run: |
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📦 Pre-Release Created!"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "Version: ${{ steps.version.outputs.tag }}"
          echo "Build: #${{ github.run_number }}"
          echo "Commit: ${{ steps.version.outputs.sha }}"
          echo ""
          echo "View at: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.tag }}"
          echo ""

